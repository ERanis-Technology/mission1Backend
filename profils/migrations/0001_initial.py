# Generated by Django 5.2.3 on 2025-08-12 22:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Abonnement',
            fields=[
                ('id_abonnement', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('critere', models.CharField(max_length=200)),
                ('plage_validite', models.CharField(max_length=100)),
                ('validite', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'abonnement',
            },
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'categorie',
            },
        ),
        migrations.CreateModel(
            name='Newsletters_subscribers',
            fields=[
                ('id_newsletter', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'pays',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id_type', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'type',
            },
        ),
        migrations.CreateModel(
            name='Administrateur',
            fields=[
                ('id_administrateur', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('mdp', models.CharField(max_length=255)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'administrateur',
            },
        ),
        migrations.CreateModel(
            name='Entreprise',
            fields=[
                ('id_entreprise', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('mdp', models.CharField(max_length=255)),
                ('tel', models.CharField(max_length=12)),
                ('secteur', models.CharField(max_length=100)),
                ('besoin', models.TextField()),
                ('nombre_employees', models.IntegerField(blank=True, default=0, null=True)),
                ('lien_site_web', models.URLField(blank=True, max_length=300, null=True, verbose_name='Lien vers site web')),
                ('adresse', models.CharField(max_length=255, verbose_name='Adresse complète (Pays, Ville)')),
                ('logo', models.ImageField(upload_to='photos/entreprises/')),
                ('personne_de_contact', models.CharField(max_length=255, verbose_name='nom et prenom')),
                ('type_abonnement', models.CharField(choices=[('basic', 'BASIC'), ('premium', 'PREMIUM')], default='basic', max_length=10, verbose_name='type abonnement')),
                ('moyen_paiement', models.CharField(choices=[('virements_bancaires', 'VIREMENTS BANCAIRES'), ('paiement_mobile', 'PAIEMENT MOBILE'), ('portefeuilles_electroniques', 'PORTESFEUILLES ELECTRONIQUES')], max_length=30, verbose_name='moyen paiement')),
                ('acceptation_condition', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='pending', max_length=10)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Professionnel',
            fields=[
                ('id_professionnel', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('tel', models.CharField(max_length=12)),
                ('mdp', models.CharField(max_length=255)),
                ('portfolio', models.URLField(blank=True, max_length=300, null=True, verbose_name='Lien vers le portfolio')),
                ('annee_experience', models.CharField(choices=[('0-1', '0 à 1 an'), ('1-3', '1 à 3 ans'), ('3-5', '3 à 5 ans'), ('5+', 'Plus de 5 ans')], max_length=5, verbose_name="Années d'expérience")),
                ('disponibilite', models.CharField(choices=[('temps_plein', 'Temps plein'), ('temps_partiel', 'Temps partiel')], default='temps_partiel', max_length=13, verbose_name='Disponibilité')),
                ('niveau_d_etude', models.CharField(choices=[('aucun', 'Aucun diplôme'), ('cep', "Certificat d'Études Primaires (CEP)"), ('bepc', "Brevet d'Études du Premier Cycle (BEPC)"), ('probatoire', 'Probatoire'), ('baccalaureat', 'Baccalauréat'), ('bts', 'BTS'), ('licence', 'Licence'), ('master', 'Master'), ('doctorat', 'Doctorat'), ('autre', 'Autre')], default='aucun', max_length=20, verbose_name="Niveau d'étude")),
                ('photo', models.ImageField(upload_to='photos/professionnels/')),
                ('adresse', models.CharField(max_length=255, verbose_name='Adresse complète (Pays, Ville)')),
                ('score_performance', models.FloatField(default=0.0)),
                ('autres_competences', models.CharField(default='Aucune', max_length=255)),
                ('cv', models.FileField(upload_to='cvs/', verbose_name='CV (format PDF)')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='pending', max_length=10)),
                ('en_mission', models.BooleanField(default=False)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'professionnel',
            },
        ),
        migrations.CreateModel(
            name='ReseauSocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plateforme', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok'), ('github', 'GitHub'), ('autre', 'Autre')], max_length=50)),
                ('lien', models.URLField(max_length=300, verbose_name='Lien ou profil')),
                ('professionnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reseaux_sociaux', to='profils.professionnel')),
            ],
        ),
        migrations.CreateModel(
            name='SouscriptionProf',
            fields=[
                ('id_souscription_prof', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('abonnement', models.ForeignKey(db_column='id_abonnement', on_delete=django.db.models.deletion.CASCADE, to='profils.abonnement')),
                ('professionnel', models.ForeignKey(db_column='id_professionnel', on_delete=django.db.models.deletion.CASCADE, to='profils.professionnel')),
            ],
            options={
                'db_table': 'souscription_prof',
            },
        ),
        migrations.CreateModel(
            name='SousDomaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('categorie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sous_domaines', to='profils.categorie')),
            ],
            options={
                'db_table': 'sous_domaine',
                'unique_together': {('nom', 'categorie')},
            },
        ),
        migrations.CreateModel(
            name='Competence',
            fields=[
                ('id_competence', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True)),
                ('professionnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competences', to='profils.professionnel')),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competences', to='profils.sousdomaine')),
            ],
            options={
                'db_table': 'competence',
            },
        ),
        migrations.AddField(
            model_name='abonnement',
            name='type',
            field=models.ForeignKey(db_column='id_type', on_delete=django.db.models.deletion.CASCADE, to='profils.type'),
        ),
        migrations.CreateModel(
            name='Ville',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('pays', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villes', to='profils.pays')),
            ],
            options={
                'db_table': 'ville',
                'unique_together': {('nom', 'pays')},
            },
        ),
    ]
